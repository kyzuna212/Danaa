/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2020-11-04 14:25:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class validation_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>MNR CLINIC</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/danaa/resources/js/jquery-3.5.1.min.js\">\r\n");
      out.write("</script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("/*홈페이지에서 사용자에게 보여주기 위한 JQuery를 사용한 유효성 검사*/\r\n");
      out.write("\r\n");
      out.write("//아이디 정규식\r\n");
      out.write("var idJ = /^[a-zA-Z0-9]{4,12}$/; // 대소문자, 숫자 4~12\r\n");
      out.write("//비밀번호 정규식 \r\n");
      out.write("var pwdJ = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{6,}$/ //영문자 +숫자 +특수 문자 포함, 최소 6자리\r\n");
      out.write("//이름 정규식\r\n");
      out.write("var nameJ = /^[가-힣]{2,6}$/; //이름은 한글 2~6자\r\n");
      out.write("//생년월일 정규식\r\n");
      out.write("var birthJ = RegExp(/^(19|20)[0-9]{2}(0[1-9]|1[1-2])(0[1-9]|[1-2][0-9]|3[0-1])$/);\r\n");
      out.write("//이메일 검사 정규식\r\n");
      out.write("var emailJ = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n");
      out.write("// 휴대폰 번호 정규식\r\n");
      out.write(" var phoneJ = /^01([0|1|6|7|8|9]?)?([0-9]{3,4})?([0-9]{4})$/; \r\n");
      out.write("\r\n");
      out.write("//이름 유효성 검사:s\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("$(function(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t//패스워드 확인:s  (***음... 실시간으로 좀 바꿀까 이거 고민중)\r\n");
      out.write("\tvar pwdck = $('#pwdck');\r\n");
      out.write("\tpwdck.blur(function() {\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif (pwdJ.test($('#pwd').val())) {//유효성 검사를 pwd가 통과했을시\r\n");
      out.write("\t\t\tif ($('#pwd').val() !== $('#pwdck').val()) {\r\n");
      out.write("\t\t\t\t$('#pwd_check').text('패스워드가 일치하지 않습니다');//패스워드 확인과 불일치시\r\n");
      out.write("\t\t\t\t$('#pwd_check').css('color', 'red');\r\n");
      out.write("\t\t\t\t$('#pwd').focus(function() { \r\n");
      out.write("\t\t\t\t\t$('#pwd_check').text('');\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t$('#pwdck').focus(function() { \r\n");
      out.write("\t\t\t\t\t$('#pwd_check').text('');\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\t$('#pwd_check').text('');//패스워드 확인 일치시\r\n");
      out.write("\t\t\t\t$(\"#name\").focus();\r\n");
      out.write("\t\t\t\t$('#name').focus(function() { //포커스가 name으로 처음가면 멘트 리셋\r\n");
      out.write("\t\t\t\t\t$('#name_check').text('');\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t} else {//유효성 검사 통과 못했을시\r\n");
      out.write("\t\t\t$('#pwd_check').text('패스워드가 형식이 맞지 않습니다');\r\n");
      out.write("\t\t\t$('#pwd_check').css('color', 'red');\r\n");
      out.write("\t\t\t$('#pwdck').focus(function() { \r\n");
      out.write("\t\t\t\t$('#pwd_check').text('');\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t});//패스워드 확인:e \r\n");
      out.write("\t\t\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t //이름 유효성 검사:s\t\r\n");
      out.write("\t\tvar name = $('#name');\r\n");
      out.write("\r\n");
      out.write("\t\tname.blur(function() {\r\n");
      out.write("\t\t\tif (nameJ.test($('#name').val()) || $('#name').val()=='' ) {\r\n");
      out.write("\t\t\t\t$('#name_check').text(''); //이름 유효성 일치시\r\n");
      out.write("\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\t$('#name_check').text('이름 형식이 맞지 않습니다');//이름 유효성 불일치시\r\n");
      out.write("\t\t\t\t$('#name_check').css('color', 'red');\r\n");
      out.write("\t\t\t\t$('#name').focus(function() { //포커스가 name으로 가면 멘트 리셋\r\n");
      out.write("\t\t\t\t\t$('#name_check').text('');\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}); //이름 유효성 검사 :e \r\n");
      out.write("\t\t\r\n");
      out.write("\r\n");
      out.write("\t//생년월일 유효성 검사:s (+추가적으로 1900년이후 출생자, 현재년도 내 출생자만 등록가능설정)\r\n");
      out.write("\t//birth를 String으로 바꿔서 01 과 1을 비교 하기 복잡해짐 ~어떻게든 나눠서 하긴함... 이게 최선인지...\r\n");
      out.write("\t\tvar birth = $('#birth')\t\r\n");
      out.write("\t\tvar today = new Date();// 날짜 변수 선언\r\n");
      out.write("\t\tvar yearNow = today.getFullYear(); // 현재 년도\r\n");
      out.write("\t\tvar monthNow = today.getMonth()+1; // 현재 월 \r\n");
      out.write("\t\tvar dayNow = today.getDate(); // 현재 일\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("\t\tbirth.blur(function() { \r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t \tif (birthJ.test($('#birth').val()) ) {//유효성 검사 통과시\t\t \t\r\n");
      out.write("\t\t \t\tconsole.log($('#birth').val().substr(4,1));\r\n");
      out.write("\t\t\t\t\tif($('#birth').val().substr(4,1)==0){//월 추출 앞이 0이면\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t//2월 달 윤달 + 28일 처리\r\n");
      out.write("\t\t\t\t\t\t if ($('#birth').val().substr(5,1) == 2) { \r\n");
      out.write("\t\t\t\t \t          var isleap = (($('#birth').val().substr(0, 4)) % 4 == 0 && (($('#birth').val().substr(0, 4)) % 100 != 0 || ($('#birth').val().substr(0, 4)) % 400 == 0));\r\n");
      out.write("\t\t\t\t \t        if($('#birth').val().substr(6,1)!=0){//일 추출 앞이 0 이 아니면\r\n");
      out.write("\t\t\t\t \t        \tif ((($('#birth').val().substr(6,2))==29 && !isleap)) {//윤달 확인\r\n");
      out.write(" \t\t\t\t \t        \t$('#birth_check').text($('#birth').val().substr(0, 4)+'년도의 2월은'+ $('#birth').val().substr(6,2)+'일이 존재하지 않습니다');\r\n");
      out.write("\t \t\t\t\t\t\t\t$('#birth_check').css('color', 'red');\r\n");
      out.write("\t \t\t\t\t\t\t\t$('#birth').focus(function() { \r\n");
      out.write("\t \t\t\t\t\t\t\t\t$('#birth_check').text('');\r\n");
      out.write("\t \t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t \t        \t}\r\n");
      out.write("\t \t\t\t\t\t\t\tif (($('#birth').val().substr(6,2))>29) { \r\n");
      out.write("\t \t\t\t\t\t\t\t\t$('#birth_check').text('생년월일 형식이 맞지 않습니다');\r\n");
      out.write("\t\t \t\t\t\t\t\t\t$('#birth_check').css('color', 'red');\r\n");
      out.write("\t\t \t\t\t\t\t\t\t$('#birth').focus(function() { \r\n");
      out.write("\t\t \t\t\t\t\t\t\t\t$('#birth_check').text('');\r\n");
      out.write("\t\t \t\t\t\t\t\t\t});\r\n");
      out.write("\t \t\t\t\t\t\t\t}\r\n");
      out.write(" \t\t\t\t \t         \r\n");
      out.write("\t\t\t\t \t        }\r\n");
      out.write("\t\t\t\t\t\t \t\r\n");
      out.write("\t\t\t\t \t     }\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t//31일이 존재하지 않는 월 제외하기(11,9월은 유효성 검사에서 걸러짐,  2월은 앞에서 처리)\r\n");
      out.write("\t\t\t\t\t\tif(($('#birth').val().substr(5,1)==4 || $('#birth').val().substr(5,1)==6 ) && $('#birth').val().substr(6,2)==31) {\r\n");
      out.write("\t\t\t\t \t        \t$('#birth_check').text('생년월일 형식이 맞지 않습니다');\r\n");
      out.write("\t \t\t\t\t\t\t\t$('#birth_check').css('color', 'red');\r\n");
      out.write("\t \t\t\t\t\t\t\t$('#birth').focus(function() { \r\n");
      out.write("\t \t\t\t\t\t\t\t\t$('#birth_check').text('');\r\n");
      out.write("\t \t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t \t     }\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t \t\tif ($('#birth').val().substr(0, 4)>1900 ){//1900년 이후 출생자\r\n");
      out.write("\t\t \t\t\tconsole.log('1900년 이후 출생자 ok');\r\n");
      out.write("\t\t \t\t\tif($('#birth').val().substr(0, 4)<=yearNow){//현재년도 내 출생자\r\n");
      out.write("\t\t \t\t\t\tconsole.log('현재 년도 내 출생자임');\r\n");
      out.write("\t\t \t\t\t\t\r\n");
      out.write("\t\t \t\t\t\tif($('#birth').val().substr(0, 4)==yearNow){ //현재년도 출생자라면\r\n");
      out.write("\t\t \t\t\t\t\tconsole.log('딱!현재년도 출생자임');\t\t\t\t\r\n");
      out.write("\t\t \t\t\t\t\t\tif($('#birth').val().substr(5,1)<monthNow){//현재 월과 비교시 전 달이면\r\n");
      out.write("\t\t \t\t\t\t\t\t\tconsole.log('앞이 0 일때 전달이면 ok');\r\n");
      out.write("\t\t \t\t\t\t\t\t}else if($('#birth').val().substr(5,1)==monthNow){//현재 월과 동일 달이면\r\n");
      out.write("\t\t \t\t\t\t\t\t\tconsole.log('일을 비교하러 가야되여');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif($('#birth').val().substr(6,1)==0){ //일 추출 앞이 0 이면\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif($('#birth').val().substr(7,1)<=dayNow){//일이 오늘 포함 전날이면\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tconsole.log('오늘까지 출생한 사람ok');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}else{//오늘 이후로 출생\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t$('#birth_check').text('생년월일 형식이 맞지 않습니다');\r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t$('#birth_check').css('color', 'red');\r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t$('#birth').focus(function() { \r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t\t$('#birth_check').text('');\r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}else{//일 추출 앞이 0이 아니면(1이면)\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif($('#birth').val().substr(6,2)<=dayNow){//일이 오늘 포함 전날이면\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tconsole.log('오늘까지 출생한 사람ok');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}else{//오늘 이후로 출생\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t$('#birth_check').text('생년월일 형식이 맞지 않습니다');\r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t$('#birth_check').css('color', 'red');\r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t$('#birth').focus(function() { \r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t\t$('#birth_check').text('');\r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t \t\t\t\t\t\t}else{//현재 월과 비교시 이 후 달이면\r\n");
      out.write("\t\t \t\t\t\t\t\t\t$('#birth_check').text('생년월일 형식이 맞지 않습니다');\r\n");
      out.write("\t\t \t\t\t\t\t\t\t$('#birth_check').css('color', 'red');\r\n");
      out.write("\t\t \t\t\t\t\t\t\t$('#birth').focus(function() { \r\n");
      out.write("\t\t \t\t\t\t\t\t\t\t$('#birth_check').text('');\r\n");
      out.write("\t\t \t\t\t\t\t\t\t});\r\n");
      out.write("\t\t \t\t\t\t\t\t}\r\n");
      out.write("\t\t \t\t\t\t\t}else{//월 추출 앞이 0이 아니면 (즉, 1이면)\r\n");
      out.write("\t\t \t\t\t\t\t\t\r\n");
      out.write("\t\t \t\t\t\t\t\r\n");
      out.write("\t\t \t\t\t\t\t\r\n");
      out.write("\t\t \t\t\t\t\t\r\n");
      out.write("\t\t \t\t\t\t\t\tif($('#birth').val().substr(4,2)<monthNow){//현재 월 이전 출생자\r\n");
      out.write("\t\t \t\t\t\t\t\t\tconsole.log('전달이면 ok');\r\n");
      out.write("\t\t \t\t\t\t\t\t}else if($('#birth').val().substr(4,2)==monthNow){//현재 월과 동일 달이면\r\n");
      out.write("\t\t \t\t\t\t\t\t\t//일을 비교하러 가야함\r\n");
      out.write("\t\t \t\t\t\t\t\t\tconsole.log('일을 비교하러 가야되여');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif($('#birth').val().substr(6,1)==0){ //일 추출 앞이 0 이면\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif($('#birth').val().substr(7,1)<=dayNow){//일이 오늘 포함 전날이면\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tconsole.log('오늘까지 출생한 사람ok');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}else{//오늘 이후로 출생\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t$('#birth_check').text('생년월일 형식이 맞지 않습니다');\r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t$('#birth_check').css('color', 'red');\r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t$('#birth').focus(function() { \r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t\t$('#birth_check').text('');\r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}else{//일 추출 앞이 0이 아니면(1이면)\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif($('#birth').val().substr(6,2)<=dayNow){//일이 오늘 포함 전날이면\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tconsole.log('오늘까지 출생한 사람ok');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}else{//오늘 이후로 출생\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t$('#birth_check').text('생년월일 형식이 맞지 않습니다');\r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t$('#birth_check').css('color', 'red');\r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t$('#birth').focus(function() { \r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t\t$('#birth_check').text('');\r\n");
      out.write("\t\t\t\t \t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t \t\t\t\t\t\t}else{//현재 월 이후\r\n");
      out.write("\t\t \t\t\t\t\t\t\t$('#birth_check').text('생년월일 형식이 맞지 않습니다');\r\n");
      out.write("\t\t \t\t\t\t\t\t\t$('#birth_check').css('color', 'red');\r\n");
      out.write("\t\t \t\t\t\t\t\t\t$('#birth').focus(function() { \r\n");
      out.write("\t\t \t\t\t\t\t\t\t\t$('#birth_check').text('');\r\n");
      out.write("\t\t \t\t\t\t\t\t\t});\r\n");
      out.write("\t\t \t\t\t\t\t\t}\r\n");
      out.write("\t\t \t\t\t\t\t} \r\n");
      out.write("\t\t \t\t\t\t}else{//현재 년도 이후 출생자\r\n");
      out.write("\t\t \t\t\t\t\tconsole.log('현재 년도보다 이후 년도임 ');\r\n");
      out.write("\t\t \t\t\t\t\t$('#birth_check').text('생년월일 형식이 맞지 않습니다');\r\n");
      out.write("\t\t\t\t\t\t\t$('#birth_check').css('color', 'red');\r\n");
      out.write("\t\t\t\t\t\t\t$('#birth').focus(function() { \r\n");
      out.write("\t\t\t\t\t\t\t\t$('#birth_check').text('');\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t \t\t\t\t}\t\t \t\t\t\t\r\n");
      out.write("\t\t \t\t\t}else{//1900이전 출생자\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t$('#birth_check').text('생년월일 형식이 맞지 않습니다');\r\n");
      out.write("\t\t\t\t\t\t$('#birth_check').css('color', 'red');\r\n");
      out.write("\t\t\t\t\t\t$('#birth').focus(function() { \r\n");
      out.write("\t\t\t\t\t\t\t$('#birth_check').text('');\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t \t\t\r\n");
      out.write("\t\t \t\t}else{//1900년 이전 출생자\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t$('#birth_check').text('생년월일 형식이 맞지 않습니다');\r\n");
      out.write("\t\t\t\t\t$('#birth_check').css('color', 'red');\r\n");
      out.write("\t\t\t\t\t$('#birth').focus(function() { \r\n");
      out.write("\t\t\t\t\t\t$('#birth_check').text('');\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}else if($('#birth').val()==''){//빈칸일 경우 \r\n");
      out.write("\t\t\t\t$('#birth_check').text('');\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t}else{//유효성 검사 통과 못함\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$('#birth_check').text('생년월일 형식이 맞지 않습니다');\r\n");
      out.write("\t\t\t\t$('#birth_check').css('color', 'red');\r\n");
      out.write("\t\t\t\t$('#birth').focus(function() { \r\n");
      out.write("\t\t\t\t\t$('#birth_check').text('');\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t\t});//생년월일 유효성 검사:e\r\n");
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//엔터키 submit 방지\r\n");
      out.write("\t\tdocument.addEventListener('keydown', function(event) {\r\n");
      out.write("\t\t\tif (event.keyCode === 13) {\r\n");
      out.write("\t\t\t    event.preventDefault();\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t}, true);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/*컨트롤러 유효성 체크 후 포커스 시 에러 reset*/\r\n");
      out.write("\t\t $('#id').focus(function() { \r\n");
      out.write("\t\t\t\t$('#id_check2').text('');\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t $('#pwd').focus(function() { \r\n");
      out.write("\t\t\t\t$('#pwd_check2').text('');\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t $('#pwdck').focus(function() { \r\n");
      out.write("\t\t\t\t$('#pwd_check2').text('');\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t $('#name').focus(function() { \r\n");
      out.write("\t\t\t\t$('#name_check2').text('');\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t $('#birth').focus(function() { \r\n");
      out.write("\t\t\t\t$('#birth_check2').text('');\r\n");
      out.write("\t\t\t\t\t\t});\t\t \t \r\n");
      out.write("\t\t $('#email').focus(function() { \r\n");
      out.write("\t\t\t\t$('#email_check2').text('');\t\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t $('#email').focus(function() { \r\n");
      out.write("\t\t\t\t$('#email_check').text('');\t\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t $('#phone').focus(function() { \r\n");
      out.write("\t\t\t\t$('#phone_check2').text('');\r\n");
      out.write("\t\t\t\t\t\t});\t\r\n");
      out.write("\t\t//라디오버튼 checked 되있을시\r\n");
      out.write("\t\t/* $(\"form:radiobutton[name='gender']\").click(function(){\r\n");
      out.write("\t\t\t$('#gender_check2').text('');\r\n");
      out.write("\t\t});  */\r\n");
      out.write("\t\t/*  if($(\"form:radiobutton[name='gender']\").is(':checked')){\r\n");
      out.write("\t\t\t$('#gender_check2').text('');\r\n");
      out.write("\t\t}  */\r\n");
      out.write("\t\t/* if($(\"#gender\").is(\":checked\")) {\r\n");
      out.write("\t\t\t$('#gender_check2').text('');\r\n");
      out.write("\t\t} */\r\n");
      out.write("\r\n");
      out.write("\t/* \t$('#gender').val()=='F' || $('#gender').val()=='M' */\r\n");
      out.write("\t\t \r\n");
      out.write("\t\t \r\n");
      out.write("\t\t\t\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
